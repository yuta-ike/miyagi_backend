datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Parent {
  id           String         @id //サブスクリプションID
  name         String
  nickname     String
  address      String
  icon         Icon           @relation(fields: [icon_id], references: [id])
  icon_id      Int
  birthday     DateTime
  child_name      String
  child_birthday  DateTime
  dairies      Dairy[]
  childs       ChaildInfo[]
  ChatMessage  ChatMessage[]
  MatchingUser MatchingUser[]
}

model ChaildInfo {
  id        Int      @id @default(autoincrement())
  parent    Parent   @relation(fields: [parent_id], references: [id])
  parent_id String
  name      String
  barthday  DateTime
}

model Icon {
  id        Int      @id @default(autoincrement())
  image_url String
  user      Parent[]
}

model Dairy {
  id                Int             @id @default(autoincrement())
  user              Parent          @relation(fields: [user_id], references: [id])
  user_id           String
  body              String
  emotion           Int
  image_url         String?
  tag               Tag[] // many to many
  created_at        DateTime        @default(now())
  bot_response      BotResponse?    @relation(fields: [bot_response_type], references: [type]) //AIコメントが付かないものもある
  bot_response_type BotResponseType
}

model BotResponse {
  type    BotResponseType @id
  comment String
  pattern Int?
  link    String?
  Dairy   Dairy[]
}

enum BotResponseType {
  NOT_POSTED
  USER_RECOMMENDATION
  ADMINISTRATIVE_SUPPORT_RECOMMENDATION
}

model Tag {
  id       String     @id
  dairy    Dairy[] // many to many
  matching Matching[] // many to many
}

model Matching {
  id          Int            @id @default(autoincrement())
  MachingUser MatchingUser[]
  Tag         Tag[] //  many to many
  ChatMessage ChatMessage[]
}

model MatchingUser {
  id            Int      @id @default(autoincrement())
  matching      Matching @relation(fields: [matching_id], references: [id])
  matching_id   Int
  match_user    Parent   @relation(fields: [match_user_id], references: [id])
  match_user_id String
}

model ChatMessage {
  id           Int      @id @default(autoincrement())
  send_user    Parent   @relation(fields: [send_user_id], references: [id])
  send_user_id String
  matching     Matching @relation(fields: [matching_id], references: [id])
  matching_id  Int
  text         String
  created_at   DateTime @default(now())
}
